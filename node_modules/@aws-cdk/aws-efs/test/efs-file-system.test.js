"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("@aws-cdk/assert");
const ec2 = require("@aws-cdk/aws-ec2");
const kms = require("@aws-cdk/aws-kms");
const core_1 = require("@aws-cdk/core");
const lib_1 = require("../lib");
let stack = new core_1.Stack();
let vpc = new ec2.Vpc(stack, 'VPC');
beforeEach(() => {
    stack = new core_1.Stack();
    vpc = new ec2.Vpc(stack, 'VPC');
});
test('default file system is created correctly', () => {
    // WHEN
    new lib_1.FileSystem(stack, 'EfsFileSystem', {
        vpc,
    });
    // THEN
    assert_1.expect(stack).to(assert_1.haveResource('AWS::EFS::FileSystem', {
        DeletionPolicy: 'Retain',
        UpdateReplacePolicy: 'Retain',
    }, assert_1.ResourcePart.CompleteDefinition));
    assert_1.expect(stack).to(assert_1.haveResource('AWS::EFS::MountTarget'));
    assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::SecurityGroup'));
});
test('unencrypted file system is created correctly with default KMS', () => {
    // WHEN
    new lib_1.FileSystem(stack, 'EfsFileSystem', {
        vpc,
        encrypted: false,
    });
    // THEN
    assert_1.expect(stack).notTo(assert_1.haveResource('AWS::EFS::FileSystem', {
        Encrypted: true,
    }));
});
test('encrypted file system is created correctly with default KMS', () => {
    // WHEN
    new lib_1.FileSystem(stack, 'EfsFileSystem', {
        vpc,
        encrypted: true,
    });
    // THEN
    assert_1.expect(stack).to(assert_1.haveResource('AWS::EFS::FileSystem', {
        Encrypted: true,
    }));
});
test('encrypted file system is created correctly with custom KMS', () => {
    const key = new kms.Key(stack, 'customKeyFS');
    // WHEN
    new lib_1.FileSystem(stack, 'EfsFileSystem', {
        vpc,
        encrypted: true,
        kmsKey: key,
    });
    // THEN
    /*
     * CDK appends 8-digit MD5 hash of the resource path to the logical Id of the resource in order to make sure
     * that the id is unique across multiple stacks. There isnt a direct way to identify the exact name of the resource
     * in generated CDK, hence hardcoding the MD5 hash here for assertion. Assumption is that the path of the Key wont
     * change in this UT. Checked the unique id by generating the cloud formation stack.
     */
    assert_1.expect(stack).to(assert_1.haveResource('AWS::EFS::FileSystem', {
        Encrypted: true,
        KmsKeyId: {
            Ref: 'customKeyFSDDB87C6D',
        },
    }));
});
test('file system is created correctly with life cycle property', () => {
    // WHEN
    new lib_1.FileSystem(stack, 'EfsFileSystem', {
        vpc,
        lifecyclePolicy: lib_1.LifecyclePolicy.AFTER_14_DAYS,
    });
    // THEN
    assert_1.expect(stack).to(assert_1.haveResource('AWS::EFS::FileSystem', {
        LifecyclePolicies: [{
                TransitionToIA: 'AFTER_14_DAYS',
            }],
    }));
});
test('file system is created correctly with performance mode', () => {
    // WHEN
    new lib_1.FileSystem(stack, 'EfsFileSystem', {
        vpc,
        performanceMode: lib_1.PerformanceMode.MAX_IO,
    });
    // THEN
    assert_1.expect(stack).to(assert_1.haveResource('AWS::EFS::FileSystem', {
        PerformanceMode: 'maxIO',
    }));
});
test('file system is created correctly with bursting throughput mode', () => {
    // WHEN
    new lib_1.FileSystem(stack, 'EfsFileSystem', {
        vpc,
        throughputMode: lib_1.ThroughputMode.BURSTING,
    });
    // THEN
    assert_1.expect(stack).to(assert_1.haveResource('AWS::EFS::FileSystem', {
        ThroughputMode: 'bursting',
    }));
});
test('Exception when throughput mode is set to PROVISIONED, but provisioned throughput is not set', () => {
    expect(() => {
        new lib_1.FileSystem(stack, 'EfsFileSystem', {
            vpc,
            throughputMode: lib_1.ThroughputMode.PROVISIONED,
        });
    }).toThrowError(/Property provisionedThroughputPerSecond is required when throughputMode is PROVISIONED/);
});
test('fails when provisioned throughput is less than the valid range', () => {
    expect(() => new lib_1.FileSystem(stack, 'EfsFileSystem', {
        vpc,
        throughputMode: lib_1.ThroughputMode.PROVISIONED,
        provisionedThroughputPerSecond: core_1.Size.kibibytes(10),
    })).toThrow(/cannot be converted into a whole number/);
});
test('fails when provisioned throughput is not a whole number of mebibytes', () => {
    expect(() => {
        new lib_1.FileSystem(stack, 'EfsFileSystem2', {
            vpc,
            throughputMode: lib_1.ThroughputMode.PROVISIONED,
            provisionedThroughputPerSecond: core_1.Size.kibibytes(2050),
        });
    }).toThrowError(/cannot be converted into a whole number/);
});
test('file system is created correctly with provisioned throughput mode', () => {
    // WHEN
    new lib_1.FileSystem(stack, 'EfsFileSystem', {
        vpc,
        throughputMode: lib_1.ThroughputMode.PROVISIONED,
        provisionedThroughputPerSecond: core_1.Size.mebibytes(5),
    });
    // THEN
    assert_1.expect(stack).to(assert_1.haveResource('AWS::EFS::FileSystem', {
        ThroughputMode: 'provisioned',
        ProvisionedThroughputInMibps: 5,
    }));
});
test('existing file system is imported correctly', () => {
    // WHEN
    const fs = lib_1.FileSystem.fromFileSystemAttributes(stack, 'existingFS', {
        fileSystemId: 'fs123',
        securityGroup: ec2.SecurityGroup.fromSecurityGroupId(stack, 'SG', 'sg-123456789', {
            allowAllOutbound: false,
        }),
    });
    fs.connections.allowToAnyIpv4(ec2.Port.tcp(443));
    // THEN
    assert_1.expect(stack).to(assert_1.haveResource('AWS::EC2::SecurityGroupEgress', {
        GroupId: 'sg-123456789',
    }));
});
test('support tags', () => {
    // WHEN
    const fileSystem = new lib_1.FileSystem(stack, 'EfsFileSystem', {
        vpc,
    });
    core_1.Tag.add(fileSystem, 'Name', 'LookAtMeAndMyFancyTags');
    // THEN
    assert_1.expect(stack).to(assert_1.haveResource('AWS::EFS::FileSystem', {
        FileSystemTags: [
            { Key: 'Name', Value: 'LookAtMeAndMyFancyTags' },
        ],
    }));
});
test('file system is created correctly when given a name', () => {
    // WHEN
    new lib_1.FileSystem(stack, 'EfsFileSystem', {
        fileSystemName: 'MyNameableFileSystem',
        vpc,
    });
    // THEN
    assert_1.expect(stack).to(assert_1.haveResource('AWS::EFS::FileSystem', {
        FileSystemTags: [
            { Key: 'Name', Value: 'MyNameableFileSystem' },
        ],
    }));
});
test('auto-named if none provided', () => {
    // WHEN
    const fileSystem = new lib_1.FileSystem(stack, 'EfsFileSystem', {
        vpc,
    });
    // THEN
    assert_1.expect(stack).to(assert_1.haveResource('AWS::EFS::FileSystem', {
        FileSystemTags: [
            { Key: 'Name', Value: fileSystem.node.path },
        ],
    }));
});
test('removalPolicy is DESTROY', () => {
    new lib_1.FileSystem(stack, 'EfsFileSystem', { vpc, removalPolicy: core_1.RemovalPolicy.DESTROY });
    assert_1.expect(stack).to(assert_1.haveResource('AWS::EFS::FileSystem', {
        DeletionPolicy: 'Delete',
        UpdateReplacePolicy: 'Delete',
    }, assert_1.ResourcePart.CompleteDefinition));
});
//# sourceMappingURL=data:application/json;base64,