#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/// !cdk-integ pragma:ignore-assets
const sns = require("@aws-cdk/aws-sns");
const ssm = require("@aws-cdk/aws-ssm");
const cdk = require("@aws-cdk/core");
const lib_1 = require("../../lib");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-cdk-sdk-js');
const topic = new sns.Topic(stack, 'Topic');
const snsPublish = new lib_1.AwsCustomResource(stack, 'Publish', {
    resourceType: 'Custom::SNSPublisher',
    onUpdate: {
        service: 'SNS',
        action: 'publish',
        parameters: {
            Message: 'hello',
            TopicArn: topic.topicArn,
        },
        physicalResourceId: lib_1.PhysicalResourceId.of(topic.topicArn),
    },
    policy: lib_1.AwsCustomResourcePolicy.fromSdkCalls({ resources: lib_1.AwsCustomResourcePolicy.ANY_RESOURCE }),
});
const listTopics = new lib_1.AwsCustomResource(stack, 'ListTopics', {
    onUpdate: {
        service: 'SNS',
        action: 'listTopics',
        physicalResourceId: lib_1.PhysicalResourceId.fromResponse('Topics.0.TopicArn'),
    },
    policy: lib_1.AwsCustomResourcePolicy.fromSdkCalls({ resources: lib_1.AwsCustomResourcePolicy.ANY_RESOURCE }),
});
listTopics.node.addDependency(topic);
const ssmParameter = new ssm.StringParameter(stack, 'DummyParameter', {
    stringValue: '1337',
});
const getParameter = new lib_1.AwsCustomResource(stack, 'GetParameter', {
    resourceType: 'Custom::SSMParameter',
    onUpdate: {
        service: 'SSM',
        action: 'getParameter',
        parameters: {
            Name: ssmParameter.parameterName,
            WithDecryption: true,
        },
        physicalResourceId: lib_1.PhysicalResourceId.fromResponse('Parameter.ARN'),
    },
    policy: lib_1.AwsCustomResourcePolicy.fromSdkCalls({ resources: lib_1.AwsCustomResourcePolicy.ANY_RESOURCE }),
});
new cdk.CfnOutput(stack, 'MessageId', { value: snsPublish.getResponseField('MessageId') });
new cdk.CfnOutput(stack, 'TopicArn', { value: listTopics.getResponseField('Topics.0.TopicArn') });
new cdk.CfnOutput(stack, 'ParameterValue', { value: getParameter.getResponseField('Parameter.Value') });
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuYXdzLWN1c3RvbS1yZXNvdXJjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLmF3cy1jdXN0b20tcmVzb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsbUNBQW1DO0FBQ25DLHdDQUF3QztBQUN4Qyx3Q0FBd0M7QUFDeEMscUNBQXFDO0FBQ3JDLG1DQUEyRjtBQUUzRixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUUxQixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLGdCQUFnQixDQUFDLENBQUM7QUFFbkQsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztBQUU1QyxNQUFNLFVBQVUsR0FBRyxJQUFJLHVCQUFpQixDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7SUFDekQsWUFBWSxFQUFFLHNCQUFzQjtJQUNwQyxRQUFRLEVBQUU7UUFDUixPQUFPLEVBQUUsS0FBSztRQUNkLE1BQU0sRUFBRSxTQUFTO1FBQ2pCLFVBQVUsRUFBRTtZQUNWLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtTQUN6QjtRQUNELGtCQUFrQixFQUFFLHdCQUFrQixDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO0tBQzFEO0lBQ0QsTUFBTSxFQUFFLDZCQUF1QixDQUFDLFlBQVksQ0FBQyxFQUFDLFNBQVMsRUFBRSw2QkFBdUIsQ0FBQyxZQUFZLEVBQUMsQ0FBQztDQUNoRyxDQUFDLENBQUM7QUFFSCxNQUFNLFVBQVUsR0FBRyxJQUFJLHVCQUFpQixDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUU7SUFDNUQsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLEtBQUs7UUFDZCxNQUFNLEVBQUUsWUFBWTtRQUNwQixrQkFBa0IsRUFBRSx3QkFBa0IsQ0FBQyxZQUFZLENBQUMsbUJBQW1CLENBQUM7S0FDekU7SUFDRCxNQUFNLEVBQUUsNkJBQXVCLENBQUMsWUFBWSxDQUFDLEVBQUMsU0FBUyxFQUFFLDZCQUF1QixDQUFDLFlBQVksRUFBQyxDQUFDO0NBQ2hHLENBQUMsQ0FBQztBQUNILFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRXJDLE1BQU0sWUFBWSxHQUFHLElBQUksR0FBRyxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLEVBQUU7SUFDcEUsV0FBVyxFQUFFLE1BQU07Q0FDcEIsQ0FBQyxDQUFDO0FBQ0gsTUFBTSxZQUFZLEdBQUcsSUFBSSx1QkFBaUIsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFO0lBQ2hFLFlBQVksRUFBRSxzQkFBc0I7SUFDcEMsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLEtBQUs7UUFDZCxNQUFNLEVBQUUsY0FBYztRQUN0QixVQUFVLEVBQUU7WUFDVixJQUFJLEVBQUUsWUFBWSxDQUFDLGFBQWE7WUFDaEMsY0FBYyxFQUFFLElBQUk7U0FDckI7UUFDRCxrQkFBa0IsRUFBRSx3QkFBa0IsQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDO0tBQ3JFO0lBQ0QsTUFBTSxFQUFFLDZCQUF1QixDQUFDLFlBQVksQ0FBQyxFQUFDLFNBQVMsRUFBRSw2QkFBdUIsQ0FBQyxZQUFZLEVBQUMsQ0FBQztDQUNoRyxDQUFDLENBQUM7QUFFSCxJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRSxFQUFFLEtBQUssRUFBRSxVQUFVLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzNGLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLEVBQUUsS0FBSyxFQUFFLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNsRyxJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLGdCQUFnQixFQUFFLEVBQUUsS0FBSyxFQUFFLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUV4RyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG4vLy8gIWNkay1pbnRlZyBwcmFnbWE6aWdub3JlLWFzc2V0c1xuaW1wb3J0ICogYXMgc25zIGZyb20gJ0Bhd3MtY2RrL2F3cy1zbnMnO1xuaW1wb3J0ICogYXMgc3NtIGZyb20gJ0Bhd3MtY2RrL2F3cy1zc20nO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0IHsgQXdzQ3VzdG9tUmVzb3VyY2UsIEF3c0N1c3RvbVJlc291cmNlUG9saWN5LCBQaHlzaWNhbFJlc291cmNlSWQgfSBmcm9tICcuLi8uLi9saWInO1xuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuXG5jb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soYXBwLCAnYXdzLWNkay1zZGstanMnKTtcblxuY29uc3QgdG9waWMgPSBuZXcgc25zLlRvcGljKHN0YWNrLCAnVG9waWMnKTtcblxuY29uc3Qgc25zUHVibGlzaCA9IG5ldyBBd3NDdXN0b21SZXNvdXJjZShzdGFjaywgJ1B1Ymxpc2gnLCB7XG4gIHJlc291cmNlVHlwZTogJ0N1c3RvbTo6U05TUHVibGlzaGVyJyxcbiAgb25VcGRhdGU6IHtcbiAgICBzZXJ2aWNlOiAnU05TJyxcbiAgICBhY3Rpb246ICdwdWJsaXNoJyxcbiAgICBwYXJhbWV0ZXJzOiB7XG4gICAgICBNZXNzYWdlOiAnaGVsbG8nLFxuICAgICAgVG9waWNBcm46IHRvcGljLnRvcGljQXJuLFxuICAgIH0sXG4gICAgcGh5c2ljYWxSZXNvdXJjZUlkOiBQaHlzaWNhbFJlc291cmNlSWQub2YodG9waWMudG9waWNBcm4pLFxuICB9LFxuICBwb2xpY3k6IEF3c0N1c3RvbVJlc291cmNlUG9saWN5LmZyb21TZGtDYWxscyh7cmVzb3VyY2VzOiBBd3NDdXN0b21SZXNvdXJjZVBvbGljeS5BTllfUkVTT1VSQ0V9KSxcbn0pO1xuXG5jb25zdCBsaXN0VG9waWNzID0gbmV3IEF3c0N1c3RvbVJlc291cmNlKHN0YWNrLCAnTGlzdFRvcGljcycsIHtcbiAgb25VcGRhdGU6IHtcbiAgICBzZXJ2aWNlOiAnU05TJyxcbiAgICBhY3Rpb246ICdsaXN0VG9waWNzJyxcbiAgICBwaHlzaWNhbFJlc291cmNlSWQ6IFBoeXNpY2FsUmVzb3VyY2VJZC5mcm9tUmVzcG9uc2UoJ1RvcGljcy4wLlRvcGljQXJuJyksXG4gIH0sXG4gIHBvbGljeTogQXdzQ3VzdG9tUmVzb3VyY2VQb2xpY3kuZnJvbVNka0NhbGxzKHtyZXNvdXJjZXM6IEF3c0N1c3RvbVJlc291cmNlUG9saWN5LkFOWV9SRVNPVVJDRX0pLFxufSk7XG5saXN0VG9waWNzLm5vZGUuYWRkRGVwZW5kZW5jeSh0b3BpYyk7XG5cbmNvbnN0IHNzbVBhcmFtZXRlciA9IG5ldyBzc20uU3RyaW5nUGFyYW1ldGVyKHN0YWNrLCAnRHVtbXlQYXJhbWV0ZXInLCB7XG4gIHN0cmluZ1ZhbHVlOiAnMTMzNycsXG59KTtcbmNvbnN0IGdldFBhcmFtZXRlciA9IG5ldyBBd3NDdXN0b21SZXNvdXJjZShzdGFjaywgJ0dldFBhcmFtZXRlcicsIHtcbiAgcmVzb3VyY2VUeXBlOiAnQ3VzdG9tOjpTU01QYXJhbWV0ZXInLFxuICBvblVwZGF0ZToge1xuICAgIHNlcnZpY2U6ICdTU00nLFxuICAgIGFjdGlvbjogJ2dldFBhcmFtZXRlcicsXG4gICAgcGFyYW1ldGVyczoge1xuICAgICAgTmFtZTogc3NtUGFyYW1ldGVyLnBhcmFtZXRlck5hbWUsXG4gICAgICBXaXRoRGVjcnlwdGlvbjogdHJ1ZSxcbiAgICB9LFxuICAgIHBoeXNpY2FsUmVzb3VyY2VJZDogUGh5c2ljYWxSZXNvdXJjZUlkLmZyb21SZXNwb25zZSgnUGFyYW1ldGVyLkFSTicpLFxuICB9LFxuICBwb2xpY3k6IEF3c0N1c3RvbVJlc291cmNlUG9saWN5LmZyb21TZGtDYWxscyh7cmVzb3VyY2VzOiBBd3NDdXN0b21SZXNvdXJjZVBvbGljeS5BTllfUkVTT1VSQ0V9KSxcbn0pO1xuXG5uZXcgY2RrLkNmbk91dHB1dChzdGFjaywgJ01lc3NhZ2VJZCcsIHsgdmFsdWU6IHNuc1B1Ymxpc2guZ2V0UmVzcG9uc2VGaWVsZCgnTWVzc2FnZUlkJykgfSk7XG5uZXcgY2RrLkNmbk91dHB1dChzdGFjaywgJ1RvcGljQXJuJywgeyB2YWx1ZTogbGlzdFRvcGljcy5nZXRSZXNwb25zZUZpZWxkKCdUb3BpY3MuMC5Ub3BpY0FybicpIH0pO1xubmV3IGNkay5DZm5PdXRwdXQoc3RhY2ssICdQYXJhbWV0ZXJWYWx1ZScsIHsgdmFsdWU6IGdldFBhcmFtZXRlci5nZXRSZXNwb25zZUZpZWxkKCdQYXJhbWV0ZXIuVmFsdWUnKSB9KTtcblxuYXBwLnN5bnRoKCk7XG4iXX0=