"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require("aws-sdk-mock");
const fs = require("fs-extra");
const nock = require("nock");
const sinon = require("sinon");
const lib_1 = require("../../lib");
const runtime_1 = require("../../lib/aws-custom-resource/runtime");
/* eslint-disable no-console */
AWS.setSDK(require.resolve('aws-sdk'));
console.log = jest.fn();
const eventCommon = {
    ServiceToken: 'token',
    ResponseURL: 'https://localhost',
    StackId: 'stackId',
    RequestId: 'requestId',
    LogicalResourceId: 'logicalResourceId',
    ResourceType: 'Custom::AWS',
};
function createRequest(bodyPredicate) {
    return nock('https://localhost')
        .put('/', bodyPredicate)
        .reply(200);
}
beforeEach(() => {
    process.env.USE_NORMAL_SDK = 'true';
});
afterEach(() => {
    AWS.restore();
    nock.cleanAll();
    delete process.env.USE_NORMAL_SDK;
});
test('create event with physical resource id path', async () => {
    const listObjectsFake = sinon.fake.resolves({
        Contents: [
            {
                Key: 'first-key',
                ETag: 'first-key-etag',
            },
            {
                Key: 'second-key',
                ETag: 'second-key-etag',
            },
        ],
    });
    AWS.mock('S3', 'listObjects', listObjectsFake);
    const event = {
        ...eventCommon,
        RequestType: 'Create',
        ResourceProperties: {
            ServiceToken: 'token',
            Create: {
                service: 'S3',
                action: 'listObjects',
                parameters: {
                    Bucket: 'my-bucket',
                },
                physicalResourceId: lib_1.PhysicalResourceId.fromResponse('Contents.1.ETag'),
            },
        },
    };
    const request = createRequest(body => body.Status === 'SUCCESS' &&
        body.PhysicalResourceId === 'second-key-etag' &&
        body.Data['Contents.0.Key'] === 'first-key');
    await runtime_1.handler(event, {});
    sinon.assert.calledWith(listObjectsFake, {
        Bucket: 'my-bucket',
    });
    expect(request.isDone()).toBeTruthy();
});
test('update event with physical resource id', async () => {
    const publish = sinon.fake.resolves({});
    AWS.mock('SNS', 'publish', publish);
    const event = {
        ...eventCommon,
        RequestType: 'Update',
        PhysicalResourceId: 'physicalResourceId',
        OldResourceProperties: {},
        ResourceProperties: {
            ServiceToken: 'token',
            Update: {
                service: 'SNS',
                action: 'publish',
                parameters: {
                    Message: 'hello',
                    TopicArn: 'topicarn',
                },
                physicalResourceId: lib_1.PhysicalResourceId.of('topicarn'),
            },
        },
    };
    const request = createRequest(body => body.Status === 'SUCCESS' &&
        body.PhysicalResourceId === 'topicarn');
    await runtime_1.handler(event, {});
    expect(request.isDone()).toBeTruthy();
});
test('delete event', async () => {
    const listObjectsFake = sinon.fake.resolves({});
    AWS.mock('S3', 'listObjects', listObjectsFake);
    const event = {
        ...eventCommon,
        RequestType: 'Delete',
        PhysicalResourceId: 'physicalResourceId',
        ResourceProperties: {
            ServiceToken: 'token',
            Create: {
                service: 'S3',
                action: 'listObjects',
                parameters: {
                    Bucket: 'my-bucket',
                },
                physicalResourceId: lib_1.PhysicalResourceId.fromResponse('Contents.1.ETag'),
            },
        },
    };
    const request = createRequest(body => body.Status === 'SUCCESS' &&
        body.PhysicalResourceId === 'physicalResourceId' &&
        Object.keys(body.Data).length === 0);
    await runtime_1.handler(event, {});
    sinon.assert.notCalled(listObjectsFake);
    expect(request.isDone()).toBeTruthy();
});
test('delete event with Delete call and no physical resource id in call', async () => {
    const deleteParameterFake = sinon.fake.resolves({});
    AWS.mock('SSM', 'deleteParameter', deleteParameterFake);
    const event = {
        ...eventCommon,
        RequestType: 'Delete',
        PhysicalResourceId: 'physicalResourceId',
        ResourceProperties: {
            ServiceToken: 'token',
            Delete: {
                service: 'SSM',
                action: 'deleteParameter',
                parameters: {
                    Name: 'my-param',
                },
            },
        },
    };
    const request = createRequest(body => body.Status === 'SUCCESS' &&
        body.PhysicalResourceId === 'physicalResourceId');
    await runtime_1.handler(event, {});
    sinon.assert.calledWith(deleteParameterFake, {
        Name: 'my-param',
    });
    expect(request.isDone()).toBeTruthy();
});
test('create event with Delete call only', async () => {
    const deleteParameterFake = sinon.fake.resolves({});
    AWS.mock('SSM', 'deleteParameter', deleteParameterFake);
    const event = {
        ...eventCommon,
        RequestType: 'Create',
        ResourceProperties: {
            ServiceToken: 'token',
            Delete: {
                service: 'SSM',
                action: 'deleteParameter',
                parameters: {
                    Name: 'my-param',
                },
            },
        },
    };
    const request = createRequest(body => body.Status === 'SUCCESS' &&
        body.PhysicalResourceId === 'logicalResourceId');
    await runtime_1.handler(event, {});
    sinon.assert.notCalled(deleteParameterFake);
    expect(request.isDone()).toBeTruthy();
});
test('catch errors', async () => {
    const error = new Error();
    error.code = 'NoSuchBucket';
    const listObjectsFake = sinon.fake.rejects(error);
    AWS.mock('S3', 'listObjects', listObjectsFake);
    const event = {
        ...eventCommon,
        RequestType: 'Create',
        ResourceProperties: {
            ServiceToken: 'token',
            Create: {
                service: 'S3',
                action: 'listObjects',
                parameters: {
                    Bucket: 'my-bucket',
                },
                physicalResourceId: lib_1.PhysicalResourceId.of('physicalResourceId'),
                ignoreErrorCodesMatching: 'NoSuchBucket',
            },
        },
    };
    const request = createRequest(body => body.Status === 'SUCCESS' &&
        body.PhysicalResourceId === 'physicalResourceId' &&
        Object.keys(body.Data).length === 0);
    await runtime_1.handler(event, {});
    expect(request.isDone()).toBeTruthy();
});
test('decodes booleans', async () => {
    const putItemFake = sinon.fake.resolves({});
    AWS.mock('DynamoDB', 'putItem', putItemFake);
    const event = {
        ...eventCommon,
        RequestType: 'Create',
        ResourceProperties: {
            ServiceToken: 'token',
            Create: {
                service: 'DynamoDB',
                action: 'putItem',
                parameters: {
                    TableName: 'table',
                    Item: {
                        True: {
                            BOOL: 'TRUE:BOOLEAN',
                        },
                        TrueString: {
                            S: 'true',
                        },
                        False: {
                            BOOL: 'FALSE:BOOLEAN',
                        },
                        FalseString: {
                            S: 'false',
                        },
                    },
                },
                physicalResourceId: lib_1.PhysicalResourceId.of('put-item'),
            },
        },
    };
    const request = createRequest(body => body.Status === 'SUCCESS');
    await runtime_1.handler(event, {});
    sinon.assert.calledWith(putItemFake, {
        TableName: 'table',
        Item: {
            True: {
                BOOL: true,
            },
            TrueString: {
                S: 'true',
            },
            False: {
                BOOL: false,
            },
            FalseString: {
                S: 'false',
            },
        },
    });
    expect(request.isDone()).toBeTruthy();
});
test('restrict output path', async () => {
    const listObjectsFake = sinon.fake.resolves({
        Contents: [
            {
                Key: 'first-key',
                ETag: 'first-key-etag',
            },
            {
                Key: 'second-key',
                ETag: 'second-key-etag',
            },
        ],
    });
    AWS.mock('S3', 'listObjects', listObjectsFake);
    const event = {
        ...eventCommon,
        RequestType: 'Create',
        ResourceProperties: {
            ServiceToken: 'token',
            Create: {
                service: 'S3',
                action: 'listObjects',
                parameters: {
                    Bucket: 'my-bucket',
                },
                physicalResourceId: lib_1.PhysicalResourceId.of('id'),
                outputPath: 'Contents.0',
            },
        },
    };
    const request = createRequest(body => body.Status === 'SUCCESS' &&
        body.PhysicalResourceId === 'id' &&
        body.Data['Contents.0.Key'] === 'first-key' &&
        body.Data['Contents.1.Key'] === undefined);
    await runtime_1.handler(event, {});
    expect(request.isDone()).toBeTruthy();
});
test('can specify apiVersion and region', async () => {
    const publishFake = sinon.fake.resolves({});
    AWS.mock('SNS', 'publish', publishFake);
    const event = {
        ...eventCommon,
        RequestType: 'Create',
        ResourceProperties: {
            ServiceToken: 'token',
            Create: {
                service: 'SNS',
                action: 'publish',
                parameters: {
                    Message: 'message',
                    TopicArn: 'topic',
                },
                apiVersion: '2010-03-31',
                region: 'eu-west-1',
                physicalResourceId: lib_1.PhysicalResourceId.of('id'),
            },
        },
    };
    const request = createRequest(body => body.Status === 'SUCCESS' &&
        body.Data.apiVersion === '2010-03-31' &&
        body.Data.region === 'eu-west-1');
    await runtime_1.handler(event, {});
    expect(request.isDone()).toBeTruthy();
});
test('flatten correctly flattens a nested object', () => {
    expect(runtime_1.flatten({
        a: { b: 'c' },
        d: [
            { e: 'f' },
            { g: 'h', i: 1, j: null, k: { l: false } },
        ],
    })).toEqual({
        'a.b': 'c',
        'd.0.e': 'f',
        'd.1.g': 'h',
        'd.1.i': 1,
        'd.1.j': null,
        'd.1.k.l': false,
    });
});
test('installs the latest SDK', async () => {
    const tmpPath = '/tmp/node_modules/aws-sdk';
    await fs.remove(tmpPath);
    const publishFake = sinon.fake.resolves({});
    AWS.mock('SNS', 'publish', publishFake);
    const event = {
        ...eventCommon,
        RequestType: 'Create',
        ResourceProperties: {
            ServiceToken: 'token',
            Create: {
                service: 'SNS',
                action: 'publish',
                parameters: {
                    Message: 'message',
                    TopicArn: 'topic',
                },
                physicalResourceId: lib_1.PhysicalResourceId.of('id'),
            },
        },
    };
    const request = createRequest(body => body.Status === 'SUCCESS');
    // Reset to 'false' so that the next run will reinstall aws-sdk
    runtime_1.forceSdkInstallation();
    await runtime_1.handler(event, {});
    expect(request.isDone()).toBeTruthy();
    expect(() => require.resolve(tmpPath)).not.toThrow();
});
//# sourceMappingURL=data:application/json;base64,