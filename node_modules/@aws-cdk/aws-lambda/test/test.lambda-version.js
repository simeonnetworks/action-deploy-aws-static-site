"use strict";
const assert_1 = require("@aws-cdk/assert");
const cdk = require("@aws-cdk/core");
const lambda = require("../lib");
module.exports = {
    'can import a Lambda version by ARN'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        const version = lambda.Version.fromVersionArn(stack, 'Version', 'arn:aws:lambda:region:account-id:function:function-name:version');
        new cdk.CfnOutput(stack, 'ARN', { value: version.functionArn });
        new cdk.CfnOutput(stack, 'Name', { value: version.functionName });
        // THEN
        assert_1.expect(stack).toMatch({
            Outputs: {
                ARN: {
                    Value: 'arn:aws:lambda:region:account-id:function:function-name:version',
                },
                Name: {
                    Value: 'function-name:version',
                },
            },
        });
        test.done();
    },
    'create a version with event invoke config'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const fn = new lambda.Function(stack, 'Fn', {
            runtime: lambda.Runtime.NODEJS_10_X,
            handler: 'index.handler',
            code: lambda.Code.fromInline('foo'),
        });
        // WHEN
        new lambda.Version(stack, 'Version', {
            lambda: fn,
            maxEventAge: cdk.Duration.hours(1),
            retryAttempts: 0,
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Lambda::EventInvokeConfig', {
            FunctionName: {
                Ref: 'Fn9270CBC0',
            },
            Qualifier: {
                'Fn::GetAtt': [
                    'Version6A868472',
                    'Version',
                ],
            },
            MaximumEventAgeInSeconds: 3600,
            MaximumRetryAttempts: 0,
        }));
        test.done();
    },
    'throws when calling configureAsyncInvoke on already configured version'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const fn = new lambda.Function(stack, 'Fn', {
            runtime: lambda.Runtime.NODEJS_10_X,
            handler: 'index.handler',
            code: lambda.Code.fromInline('foo'),
        });
        const version = new lambda.Version(stack, 'Version', {
            lambda: fn,
            maxEventAge: cdk.Duration.hours(1),
            retryAttempts: 0,
        });
        // THEN
        test.throws(() => version.configureAsyncInvoke({ retryAttempts: 1 }), /An EventInvokeConfig has already been configured/);
        test.done();
    },
    'event invoke config on imported versions'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const version1 = lambda.Version.fromVersionArn(stack, 'Version1', 'arn:aws:lambda:region:account-id:function:function-name:version1');
        const version2 = lambda.Version.fromVersionArn(stack, 'Version2', 'arn:aws:lambda:region:account-id:function:function-name:version2');
        // WHEN
        version1.configureAsyncInvoke({
            retryAttempts: 1,
        });
        version2.configureAsyncInvoke({
            retryAttempts: 0,
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Lambda::EventInvokeConfig', {
            FunctionName: 'function-name',
            Qualifier: 'version1',
            MaximumRetryAttempts: 1,
        }));
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Lambda::EventInvokeConfig', {
            FunctionName: 'function-name',
            Qualifier: 'version2',
            MaximumRetryAttempts: 0,
        }));
        test.done();
    },
    'addAlias can be used to add an alias that points to a version'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const fn = new lambda.Function(stack, 'Fn', {
            runtime: lambda.Runtime.NODEJS_10_X,
            handler: 'index.handler',
            code: lambda.Code.fromInline('foo'),
        });
        const version = fn.currentVersion;
        // WHEN
        version.addAlias('foo');
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::Lambda::Alias', {
            'FunctionName': {
                'Ref': 'Fn9270CBC0',
            },
            'FunctionVersion': {
                'Fn::GetAtt': [
                    'FnCurrentVersion17A89ABBab5c765f3c55e4e61583b51b00a95742',
                    'Version',
                ],
            },
            'Name': 'foo',
        }));
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,