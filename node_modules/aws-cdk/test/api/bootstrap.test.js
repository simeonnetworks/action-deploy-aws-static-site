"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../../lib");
const serialize_1 = require("../../lib/serialize");
const mock_sdk_1 = require("../util/mock-sdk");
const env = {
    account: '123456789012',
    region: 'us-east-1',
    name: 'mock',
};
let sdk;
let executed;
let protectedTermination;
let cfnMocks;
let changeSetTemplate;
beforeEach(() => {
    sdk = new mock_sdk_1.MockSdkProvider();
    executed = false;
    protectedTermination = false;
    cfnMocks = {
        describeStacks: jest.fn()
            // First two calls, no stacks exist (first is for version checking, second is in deploy-stack.ts)
            .mockImplementationOnce(() => ({ Stacks: [] }))
            .mockImplementationOnce(() => ({ Stacks: [] }))
            // Second call, stack has been created
            .mockImplementationOnce(() => ({ Stacks: [
                {
                    StackStatus: 'CREATE_COMPLETE',
                    StackStatusReason: 'It is magic',
                    EnableTerminationProtection: false,
                },
            ] })),
        createChangeSet: jest.fn((info) => {
            changeSetTemplate = serialize_1.fromYAML(info.TemplateBody);
            return {};
        }),
        describeChangeSet: jest.fn(() => ({
            Status: 'CREATE_COMPLETE',
            Changes: [],
        })),
        executeChangeSet: jest.fn(() => {
            executed = true;
            return {};
        }),
        getTemplate: jest.fn(() => {
            executed = true;
            return {};
        }),
        deleteStack: jest.fn(),
        updateTerminationProtection: jest.fn(() => {
            protectedTermination = true;
            return {};
        }),
    };
    sdk.stubCloudFormation(cfnMocks);
});
test('do bootstrap', async () => {
    // WHEN
    const ret = await lib_1.bootstrapEnvironment(env, sdk, { toolkitStackName: 'mockStack' });
    // THEN
    const bucketProperties = changeSetTemplate.Resources.StagingBucket.Properties;
    expect(bucketProperties.BucketName).toBeUndefined();
    expect(bucketProperties.BucketEncryption.ServerSideEncryptionConfiguration[0].ServerSideEncryptionByDefault.KMSMasterKeyID)
        .toBeUndefined();
    expect(changeSetTemplate.Conditions.UsePublicAccessBlockConfiguration['Fn::Equals'][0]).toBe('true');
    expect(ret.noOp).toBeFalsy();
    expect(executed).toBeTruthy();
});
test('do bootstrap using custom bucket name', async () => {
    // WHEN
    const ret = await lib_1.bootstrapEnvironment(env, sdk, {
        toolkitStackName: 'mockStack',
        parameters: {
            bucketName: 'foobar',
        },
    });
    // THEN
    const bucketProperties = changeSetTemplate.Resources.StagingBucket.Properties;
    expect(bucketProperties.BucketName).toBe('foobar');
    expect(bucketProperties.BucketEncryption.ServerSideEncryptionConfiguration[0].ServerSideEncryptionByDefault.KMSMasterKeyID)
        .toBeUndefined();
    expect(changeSetTemplate.Conditions.UsePublicAccessBlockConfiguration['Fn::Equals'][0]).toBe('true');
    expect(ret.noOp).toBeFalsy();
    expect(executed).toBeTruthy();
});
test('do bootstrap using KMS CMK', async () => {
    // WHEN
    const ret = await lib_1.bootstrapEnvironment(env, sdk, {
        toolkitStackName: 'mockStack',
        parameters: {
            kmsKeyId: 'myKmsKey',
        },
    });
    // THEN
    const bucketProperties = changeSetTemplate.Resources.StagingBucket.Properties;
    expect(bucketProperties.BucketName).toBeUndefined();
    expect(bucketProperties.BucketEncryption.ServerSideEncryptionConfiguration[0].ServerSideEncryptionByDefault.KMSMasterKeyID)
        .toBe('myKmsKey');
    expect(changeSetTemplate.Conditions.UsePublicAccessBlockConfiguration['Fn::Equals'][0]).toBe('true');
    expect(ret.noOp).toBeFalsy();
    expect(executed).toBeTruthy();
});
test('bootstrap disable bucket Public Access Block Configuration', async () => {
    // WHEN
    const ret = await lib_1.bootstrapEnvironment(env, sdk, {
        toolkitStackName: 'mockStack',
        parameters: {
            publicAccessBlockConfiguration: false,
        },
    });
    // THEN
    const bucketProperties = changeSetTemplate.Resources.StagingBucket.Properties;
    expect(bucketProperties.BucketName).toBeUndefined();
    expect(bucketProperties.BucketEncryption.ServerSideEncryptionConfiguration[0].ServerSideEncryptionByDefault.KMSMasterKeyID)
        .toBeUndefined();
    expect(changeSetTemplate.Conditions.UsePublicAccessBlockConfiguration['Fn::Equals'][0]).toBe('false');
    expect(ret.noOp).toBeFalsy();
    expect(executed).toBeTruthy();
});
test('do bootstrap with custom tags for toolkit stack', async () => {
    // WHEN
    const ret = await lib_1.bootstrapEnvironment(env, sdk, {
        toolkitStackName: 'mockStack',
        parameters: {
            tags: [{ Key: 'Foo', Value: 'Bar' }],
        },
    });
    // THEN
    const bucketProperties = changeSetTemplate.Resources.StagingBucket.Properties;
    expect(bucketProperties.BucketName).toBeUndefined();
    expect(bucketProperties.BucketEncryption.ServerSideEncryptionConfiguration[0].ServerSideEncryptionByDefault.KMSMasterKeyID)
        .toBeUndefined();
    expect(changeSetTemplate.Conditions.UsePublicAccessBlockConfiguration['Fn::Equals'][0]).toBe('true');
    expect(ret.noOp).toBeFalsy();
    expect(executed).toBeTruthy();
});
test('passing trusted accounts to the old bootstrapping results in an error', async () => {
    await expect(lib_1.bootstrapEnvironment(env, sdk, {
        toolkitStackName: 'mockStack',
        parameters: {
            trustedAccounts: ['0123456789012'],
        },
    }))
        .rejects
        .toThrow('--trust can only be passed for the new bootstrap experience.');
});
test('passing CFN execution policies to the old bootstrapping results in an error', async () => {
    await expect(lib_1.bootstrapEnvironment(env, sdk, {
        toolkitStackName: 'mockStack',
        parameters: {
            cloudFormationExecutionPolicies: ['arn:aws:iam::aws:policy/AdministratorAccess'],
        },
    }))
        .rejects
        .toThrow('--cloudformation-execution-policies can only be passed for the new bootstrap experience.');
});
test('even if the bootstrap stack is in a rollback state, can still retry bootstrapping it', async () => {
    cfnMocks.describeStacks
        .mockReset()
        // First two calls, the stack exists with a 'rollback complete' status
        // (first is for version checking, second is in deploy-stack.ts)
        .mockImplementationOnce(() => ({ Stacks: [
            {
                StackStatus: 'UPDATE_ROLLBACK_COMPLETE',
                StackStatusReason: 'It is magic',
                Outputs: [
                    { OutputKey: 'BucketName', OutputValue: 'bucket' },
                    { OutputKey: 'BucketDomainName', OutputValue: 'aws.com' },
                ],
            },
        ] }))
        .mockImplementationOnce(() => ({ Stacks: [
            {
                StackStatus: 'UPDATE_ROLLBACK_COMPLETE',
                StackStatusReason: 'It is magic',
                Outputs: [
                    { OutputKey: 'BucketName', OutputValue: 'bucket' },
                    { OutputKey: 'BucketDomainName', OutputValue: 'aws.com' },
                ],
            },
        ] }))
        // Third call, stack has been created
        .mockImplementationOnce(() => ({ Stacks: [
            {
                StackStatus: 'CREATE_COMPLETE',
                StackStatusReason: 'It is magic',
                EnableTerminationProtection: false,
            },
        ] }));
    // WHEN
    const ret = await lib_1.bootstrapEnvironment(env, sdk, { toolkitStackName: 'mockStack' });
    // THEN
    const bucketProperties = changeSetTemplate.Resources.StagingBucket.Properties;
    expect(bucketProperties.BucketName).toBeUndefined();
    expect(bucketProperties.BucketEncryption.ServerSideEncryptionConfiguration[0].ServerSideEncryptionByDefault.KMSMasterKeyID)
        .toBeUndefined();
    expect(ret.noOp).toBeFalsy();
    expect(executed).toBeTruthy();
});
test('even if the bootstrap stack failed to create, can still retry bootstrapping it', async () => {
    cfnMocks.describeStacks
        .mockReset()
        // First two calls, the stack exists with a 'rollback complete' status
        // (first is for version checking, second is in deploy-stack.ts)
        .mockImplementationOnce(() => ({ Stacks: [
            {
                StackStatus: 'ROLLBACK_COMPLETE',
                StackStatusReason: 'It is magic',
                Outputs: [
                    { OutputKey: 'BucketName', OutputValue: 'bucket' },
                ],
            },
        ] }))
        .mockImplementationOnce(() => ({ Stacks: [
            {
                StackStatus: 'ROLLBACK_COMPLETE',
                StackStatusReason: 'It is magic',
                Outputs: [
                    { OutputKey: 'BucketName', OutputValue: 'bucket' },
                ],
            },
        ] }))
        // Third call, we just did a delete and want to see it gone
        .mockImplementationOnce(() => ({ Stacks: [] }))
        // Fourth call, stack has been created
        .mockImplementationOnce(() => ({ Stacks: [
            {
                StackStatus: 'CREATE_COMPLETE',
                StackStatusReason: 'It is magic',
                EnableTerminationProtection: false,
            },
        ] }));
    // WHEN
    const ret = await lib_1.bootstrapEnvironment(env, sdk, { toolkitStackName: 'mockStack' });
    // THEN
    const bucketProperties = changeSetTemplate.Resources.StagingBucket.Properties;
    expect(bucketProperties.BucketName).toBeUndefined();
    expect(bucketProperties.BucketEncryption.ServerSideEncryptionConfiguration[0].ServerSideEncryptionByDefault.KMSMasterKeyID)
        .toBeUndefined();
    expect(ret.noOp).toBeFalsy();
    expect(executed).toBeTruthy();
    expect(cfnMocks.deleteStack).toHaveBeenCalled();
});
test('stack is not termination protected by default', async () => {
    // WHEN
    await lib_1.bootstrapEnvironment(env, sdk);
    // THEN
    expect(executed).toBeTruthy();
    expect(protectedTermination).toBeFalsy();
});
test('stack is termination protected when set', async () => {
    // WHEN
    await lib_1.bootstrapEnvironment(env, sdk, {
        parameters: {
            terminationProtection: true,
        },
    });
    // THEN
    expect(executed).toBeTruthy();
    expect(protectedTermination).toBeTruthy();
});
//# sourceMappingURL=data:application/json;base64,