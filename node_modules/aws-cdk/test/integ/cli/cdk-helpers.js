"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rememberToDeleteBucket = exports.shell = exports.cleanup = exports.deleteableStacks = exports.prepareAppFixture = exports.cloneDirectory = exports.fullStackName = exports.cdk = exports.cdkDestroy = exports.cdkDeploy = exports.log = exports.STACK_NAME_PREFIX = exports.INTEG_TEST_DIR = void 0;
const child_process = require("child_process");
const os = require("os");
const path = require("path");
const aws_helpers_1 = require("./aws-helpers");
exports.INTEG_TEST_DIR = path.join(os.tmpdir(), 'cdk-integ-test2');
// create a unique stack name prefix for this test test run. this is passed
// through an environment variable to app.js so that all stacks use this prefix.
const timestamp = new Date().toISOString().replace(/[^0-9]/g, '');
exports.STACK_NAME_PREFIX = `cdktest-${timestamp}`;
process.stdout.write('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n');
process.stdout.write(` All stacks created by this test run will have the prefix: ${exports.STACK_NAME_PREFIX}\n`);
process.stdout.write('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n');
function log(x) {
    process.stderr.write(x + '\n');
}
exports.log = log;
async function cdkDeploy(stackNames, options = {}) {
    var _a, _b;
    stackNames = typeof stackNames === 'string' ? [stackNames] : stackNames;
    const neverRequireApproval = (_a = options.neverRequireApproval) !== null && _a !== void 0 ? _a : true;
    return await cdk(['deploy',
        ...(neverRequireApproval ? ['--require-approval=never'] : []), // Default to no approval in an unattended test
        ...((_b = options.options) !== null && _b !== void 0 ? _b : []), ...fullStackName(stackNames)], options);
}
exports.cdkDeploy = cdkDeploy;
async function cdkDestroy(stackNames, options = {}) {
    var _a;
    stackNames = typeof stackNames === 'string' ? [stackNames] : stackNames;
    return await cdk(['destroy',
        '-f', // We never want a prompt in an unattended test
        ...((_a = options.options) !== null && _a !== void 0 ? _a : []), ...fullStackName(stackNames)], options);
}
exports.cdkDestroy = cdkDestroy;
async function cdk(args, options = {}) {
    return await shell(['cdk', ...args], {
        cwd: exports.INTEG_TEST_DIR,
        ...options,
        modEnv: {
            AWS_REGION: (await aws_helpers_1.testEnv()).region,
            AWS_DEFAULT_REGION: (await aws_helpers_1.testEnv()).region,
            STACK_NAME_PREFIX: exports.STACK_NAME_PREFIX,
            ...options.modEnv,
        },
    });
}
exports.cdk = cdk;
function fullStackName(stackNames) {
    if (typeof stackNames === 'string') {
        return `${exports.STACK_NAME_PREFIX}-${stackNames}`;
    }
    else {
        return stackNames.map(s => `${exports.STACK_NAME_PREFIX}-${s}`);
    }
}
exports.fullStackName = fullStackName;
/**
 * Prepare a target dir byreplicating a source directory
 */
async function cloneDirectory(source, target) {
    await shell(['rm', '-rf', target]);
    await shell(['mkdir', '-p', target]);
    await shell(['cp', '-R', source + '/*', target]);
}
exports.cloneDirectory = cloneDirectory;
/**
 * Prepare the app fixture
 *
 * If this is done in the main test script, it will be skipped
 * in the subprocess scripts since the app fixture can just be reused.
 */
async function prepareAppFixture() {
    await cloneDirectory(path.join(__dirname, 'app'), exports.INTEG_TEST_DIR);
    await shell(['npm', 'install',
        '@aws-cdk/core',
        '@aws-cdk/aws-sns',
        '@aws-cdk/aws-iam',
        '@aws-cdk/aws-lambda',
        '@aws-cdk/aws-ssm',
        '@aws-cdk/aws-ecr-assets',
        '@aws-cdk/aws-cloudformation',
        '@aws-cdk/aws-ec2'], {
        cwd: exports.INTEG_TEST_DIR,
    });
}
exports.prepareAppFixture = prepareAppFixture;
/**
 * Return the stacks starting with our testing prefix that should be deleted
 */
async function deleteableStacks(prefix) {
    var _a;
    const statusFilter = [
        'CREATE_IN_PROGRESS', 'CREATE_FAILED', 'CREATE_COMPLETE',
        'ROLLBACK_IN_PROGRESS', 'ROLLBACK_FAILED', 'ROLLBACK_COMPLETE',
        'DELETE_FAILED',
        'UPDATE_IN_PROGRESS', 'UPDATE_COMPLETE_CLEANUP_IN_PROGRESS',
        'UPDATE_COMPLETE', 'UPDATE_ROLLBACK_IN_PROGRESS',
        'UPDATE_ROLLBACK_FAILED',
        'UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS',
        'UPDATE_ROLLBACK_COMPLETE', 'REVIEW_IN_PROGRESS',
        'IMPORT_IN_PROGRESS', 'IMPORT_COMPLETE',
        'IMPORT_ROLLBACK_IN_PROGRESS', 'IMPORT_ROLLBACK_FAILED',
        'IMPORT_ROLLBACK_COMPLETE',
    ];
    const response = await aws_helpers_1.cloudFormation('describeStacks', {});
    return ((_a = response.Stacks) !== null && _a !== void 0 ? _a : [])
        .filter(s => s.StackName.startsWith(prefix))
        .filter(s => statusFilter.includes(s.StackStatus))
        .filter(s => s.RootId === undefined); // Only delete parent stacks. Nested stacks are deleted in the process
}
exports.deleteableStacks = deleteableStacks;
/**
 * Cleanup leftover stacks and buckets
 */
async function cleanup() {
    const stacksToDelete = await deleteableStacks(exports.STACK_NAME_PREFIX);
    // Bootstrap stacks have buckets that need to be cleaned
    const bucketNames = stacksToDelete.map(stack => aws_helpers_1.outputFromStack('BucketName', stack)).filter(defined);
    await Promise.all(bucketNames.map(aws_helpers_1.emptyBucket));
    // Bootstrap stacks have ECR repositories with images which should be deleted
    const imageRepositoryNames = stacksToDelete.map(stack => aws_helpers_1.outputFromStack('ImageRepositoryName', stack)).filter(defined);
    await Promise.all(imageRepositoryNames.map(aws_helpers_1.deleteImageRepository));
    await aws_helpers_1.deleteStacks(...stacksToDelete.map(s => s.StackName));
    // We might have leaked some buckets by upgrading the bootstrap stack. Be
    // sure to clean everything.
    for (const bucket of bucketsToDelete) {
        await aws_helpers_1.deleteBucket(bucket);
    }
    bucketsToDelete = [];
}
exports.cleanup = cleanup;
/**
 * A shell command that does what you want
 *
 * Is platform-aware, handles errors nicely.
 */
async function shell(command, options = {}) {
    var _a;
    if (options.modEnv && options.env) {
        throw new Error('Use either env or modEnv but not both');
    }
    log(`ðŸ’» ${command.join(' ')}`);
    const env = (_a = options.env) !== null && _a !== void 0 ? _a : (options.modEnv ? { ...process.env, ...options.modEnv } : undefined);
    const child = child_process.spawn(command[0], command.slice(1), {
        ...options,
        env,
        // Need this for Windows where we want .cmd and .bat to be found as well.
        shell: true,
        stdio: ['ignore', 'pipe', 'pipe'],
    });
    return new Promise((resolve, reject) => {
        const stdout = new Array();
        const stderr = new Array();
        child.stdout.on('data', chunk => {
            process.stdout.write(chunk);
            stdout.push(chunk);
        });
        child.stderr.on('data', chunk => {
            var _a;
            process.stderr.write(chunk);
            if ((_a = options.captureStderr) !== null && _a !== void 0 ? _a : true) {
                stderr.push(chunk);
            }
        });
        child.once('error', reject);
        child.once('close', code => {
            if (code === 0 || options.allowErrExit) {
                resolve((Buffer.concat(stdout).toString('utf-8') + Buffer.concat(stderr).toString('utf-8')).trim());
            }
            else {
                reject(new Error(`'${command.join(' ')}' exited with error code ${code}: ${Buffer.concat(stderr).toString('utf-8').trim()}`));
            }
        });
    });
}
exports.shell = shell;
let bucketsToDelete = new Array();
/**
 * Append this to the list of buckets to potentially delete
 *
 * At the end of a test, we clean up buckets that may not have gotten destroyed
 * (for whatever reason).
 */
function rememberToDeleteBucket(bucketName) {
    bucketsToDelete.push(bucketName);
}
exports.rememberToDeleteBucket = rememberToDeleteBucket;
function defined(x) {
    return x !== undefined;
}
//# sourceMappingURL=data:application/json;base64,