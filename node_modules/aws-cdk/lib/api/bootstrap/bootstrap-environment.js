"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bootstrapEnvironment2 = exports.bootstrapEnvironment = void 0;
const path = require("path");
const serialize_1 = require("../../serialize");
const deploy_bootstrap_1 = require("./deploy-bootstrap");
const legacy_template_1 = require("./legacy-template");
/* eslint-disable max-len */
/**
 * Deploy legacy bootstrap stack
 *
 * @experimental
 */
async function bootstrapEnvironment(environment, sdkProvider, options = {}) {
    var _a, _b, _c;
    const params = (_a = options.parameters) !== null && _a !== void 0 ? _a : {};
    if ((_b = params.trustedAccounts) === null || _b === void 0 ? void 0 : _b.length) {
        throw new Error('--trust can only be passed for the new bootstrap experience.');
    }
    if ((_c = params.cloudFormationExecutionPolicies) === null || _c === void 0 ? void 0 : _c.length) {
        throw new Error('--cloudformation-execution-policies can only be passed for the new bootstrap experience.');
    }
    if (params.qualifier) {
        throw new Error('--qualifier can only be passed for the new bootstrap experience.');
    }
    return deploy_bootstrap_1.deployBootstrapStack(legacy_template_1.legacyBootstrapTemplate(params), {}, environment, sdkProvider, options);
}
exports.bootstrapEnvironment = bootstrapEnvironment;
/**
 * Deploy CI/CD-ready bootstrap stack from template
 *
 * @experimental
 */
async function bootstrapEnvironment2(environment, sdkProvider, options = {}) {
    var _a, _b, _c, _d, _e;
    const params = (_a = options.parameters) !== null && _a !== void 0 ? _a : {};
    if (((_b = params.trustedAccounts) === null || _b === void 0 ? void 0 : _b.length) && !((_c = params.cloudFormationExecutionPolicies) === null || _c === void 0 ? void 0 : _c.length)) {
        throw new Error('--cloudformation-execution-policies are required if --trust has been passed!');
    }
    const bootstrapTemplatePath = path.join(__dirname, 'bootstrap-template.yaml');
    const bootstrapTemplate = await serialize_1.loadStructuredFile(bootstrapTemplatePath);
    return deploy_bootstrap_1.deployBootstrapStack(bootstrapTemplate, {
        FileAssetsBucketName: params.bucketName,
        FileAssetsBucketKmsKeyId: params.kmsKeyId,
        TrustedAccounts: (_d = params.trustedAccounts) === null || _d === void 0 ? void 0 : _d.join(','),
        CloudFormationExecutionPolicies: (_e = params.cloudFormationExecutionPolicies) === null || _e === void 0 ? void 0 : _e.join(','),
        Qualifier: params.qualifier,
        PublicAccessBlockConfiguration: params.publicAccessBlockConfiguration || params.publicAccessBlockConfiguration === undefined ? 'true' : 'false',
    }, environment, sdkProvider, options);
}
exports.bootstrapEnvironment2 = bootstrapEnvironment2;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwLWVudmlyb25tZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYm9vdHN0cmFwLWVudmlyb25tZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZCQUE2QjtBQUU3QiwrQ0FBcUQ7QUFJckQseURBQTBEO0FBQzFELHVEQUE0RDtBQUU1RCw0QkFBNEI7QUFFNUI7Ozs7R0FJRztBQUNJLEtBQUssVUFBVSxvQkFBb0IsQ0FBQyxXQUE4QixFQUFFLFdBQXdCLEVBQUUsVUFBdUMsRUFBRTs7SUFDNUksTUFBTSxNQUFNLFNBQUcsT0FBTyxDQUFDLFVBQVUsbUNBQUksRUFBRSxDQUFDO0lBRXhDLFVBQUksTUFBTSxDQUFDLGVBQWUsMENBQUUsTUFBTSxFQUFFO1FBQ2xDLE1BQU0sSUFBSSxLQUFLLENBQUMsOERBQThELENBQUMsQ0FBQztLQUNqRjtJQUNELFVBQUksTUFBTSxDQUFDLCtCQUErQiwwQ0FBRSxNQUFNLEVBQUU7UUFDbEQsTUFBTSxJQUFJLEtBQUssQ0FBQywwRkFBMEYsQ0FBQyxDQUFDO0tBQzdHO0lBQ0QsSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFO1FBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMsa0VBQWtFLENBQUMsQ0FBQztLQUNyRjtJQUVELE9BQU8sdUNBQW9CLENBQ3pCLHlDQUF1QixDQUFDLE1BQU0sQ0FBQyxFQUMvQixFQUFFLEVBQ0YsV0FBVyxFQUNYLFdBQVcsRUFDWCxPQUFPLENBQUMsQ0FBQztBQUNiLENBQUM7QUFuQkQsb0RBbUJDO0FBRUQ7Ozs7R0FJRztBQUNJLEtBQUssVUFBVSxxQkFBcUIsQ0FDekMsV0FBOEIsRUFDOUIsV0FBd0IsRUFDeEIsVUFBdUMsRUFBRTs7SUFFekMsTUFBTSxNQUFNLFNBQUcsT0FBTyxDQUFDLFVBQVUsbUNBQUksRUFBRSxDQUFDO0lBRXhDLElBQUksT0FBQSxNQUFNLENBQUMsZUFBZSwwQ0FBRSxNQUFNLEtBQUksUUFBQyxNQUFNLENBQUMsK0JBQStCLDBDQUFFLE1BQU0sQ0FBQSxFQUFFO1FBQ3JGLE1BQU0sSUFBSSxLQUFLLENBQUMsOEVBQThFLENBQUMsQ0FBQztLQUNqRztJQUVELE1BQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUseUJBQXlCLENBQUMsQ0FBQztJQUM5RSxNQUFNLGlCQUFpQixHQUFHLE1BQU0sOEJBQWtCLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUUxRSxPQUFPLHVDQUFvQixDQUN6QixpQkFBaUIsRUFDakI7UUFDRSxvQkFBb0IsRUFBRSxNQUFNLENBQUMsVUFBVTtRQUN2Qyx3QkFBd0IsRUFBRSxNQUFNLENBQUMsUUFBUTtRQUN6QyxlQUFlLFFBQUUsTUFBTSxDQUFDLGVBQWUsMENBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUNsRCwrQkFBK0IsUUFBRSxNQUFNLENBQUMsK0JBQStCLDBDQUFFLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDbEYsU0FBUyxFQUFFLE1BQU0sQ0FBQyxTQUFTO1FBQzNCLDhCQUE4QixFQUFFLE1BQU0sQ0FBQyw4QkFBOEIsSUFBSSxNQUFNLENBQUMsOEJBQThCLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU87S0FDaEosRUFDRCxXQUFXLEVBQ1gsV0FBVyxFQUNYLE9BQU8sQ0FBQyxDQUFDO0FBQ2IsQ0FBQztBQTNCRCxzREEyQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgY3hhcGkgZnJvbSAnQGF3cy1jZGsvY3gtYXBpJztcbmltcG9ydCB7IGxvYWRTdHJ1Y3R1cmVkRmlsZSB9IGZyb20gJy4uLy4uL3NlcmlhbGl6ZSc7XG5pbXBvcnQgeyBTZGtQcm92aWRlciB9IGZyb20gJy4uL2F3cy1hdXRoJztcbmltcG9ydCB7IERlcGxveVN0YWNrUmVzdWx0IH0gZnJvbSAnLi4vZGVwbG95LXN0YWNrJztcbmltcG9ydCB7IEJvb3RzdHJhcEVudmlyb25tZW50T3B0aW9ucyB9IGZyb20gJy4vYm9vdHN0cmFwLXByb3BzJztcbmltcG9ydCB7IGRlcGxveUJvb3RzdHJhcFN0YWNrIH0gZnJvbSAnLi9kZXBsb3ktYm9vdHN0cmFwJztcbmltcG9ydCB7IGxlZ2FjeUJvb3RzdHJhcFRlbXBsYXRlIH0gZnJvbSAnLi9sZWdhY3ktdGVtcGxhdGUnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cbi8qKlxuICogRGVwbG95IGxlZ2FjeSBib290c3RyYXAgc3RhY2tcbiAqXG4gKiBAZXhwZXJpbWVudGFsXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBib290c3RyYXBFbnZpcm9ubWVudChlbnZpcm9ubWVudDogY3hhcGkuRW52aXJvbm1lbnQsIHNka1Byb3ZpZGVyOiBTZGtQcm92aWRlciwgb3B0aW9uczogQm9vdHN0cmFwRW52aXJvbm1lbnRPcHRpb25zID0ge30pOiBQcm9taXNlPERlcGxveVN0YWNrUmVzdWx0PiB7XG4gIGNvbnN0IHBhcmFtcyA9IG9wdGlvbnMucGFyYW1ldGVycyA/PyB7fTtcblxuICBpZiAocGFyYW1zLnRydXN0ZWRBY2NvdW50cz8ubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCctLXRydXN0IGNhbiBvbmx5IGJlIHBhc3NlZCBmb3IgdGhlIG5ldyBib290c3RyYXAgZXhwZXJpZW5jZS4nKTtcbiAgfVxuICBpZiAocGFyYW1zLmNsb3VkRm9ybWF0aW9uRXhlY3V0aW9uUG9saWNpZXM/Lmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcignLS1jbG91ZGZvcm1hdGlvbi1leGVjdXRpb24tcG9saWNpZXMgY2FuIG9ubHkgYmUgcGFzc2VkIGZvciB0aGUgbmV3IGJvb3RzdHJhcCBleHBlcmllbmNlLicpO1xuICB9XG4gIGlmIChwYXJhbXMucXVhbGlmaWVyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCctLXF1YWxpZmllciBjYW4gb25seSBiZSBwYXNzZWQgZm9yIHRoZSBuZXcgYm9vdHN0cmFwIGV4cGVyaWVuY2UuJyk7XG4gIH1cblxuICByZXR1cm4gZGVwbG95Qm9vdHN0cmFwU3RhY2soXG4gICAgbGVnYWN5Qm9vdHN0cmFwVGVtcGxhdGUocGFyYW1zKSxcbiAgICB7fSxcbiAgICBlbnZpcm9ubWVudCxcbiAgICBzZGtQcm92aWRlcixcbiAgICBvcHRpb25zKTtcbn1cblxuLyoqXG4gKiBEZXBsb3kgQ0kvQ0QtcmVhZHkgYm9vdHN0cmFwIHN0YWNrIGZyb20gdGVtcGxhdGVcbiAqXG4gKiBAZXhwZXJpbWVudGFsXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBib290c3RyYXBFbnZpcm9ubWVudDIoXG4gIGVudmlyb25tZW50OiBjeGFwaS5FbnZpcm9ubWVudCxcbiAgc2RrUHJvdmlkZXI6IFNka1Byb3ZpZGVyLFxuICBvcHRpb25zOiBCb290c3RyYXBFbnZpcm9ubWVudE9wdGlvbnMgPSB7fSk6IFByb21pc2U8RGVwbG95U3RhY2tSZXN1bHQ+IHtcblxuICBjb25zdCBwYXJhbXMgPSBvcHRpb25zLnBhcmFtZXRlcnMgPz8ge307XG5cbiAgaWYgKHBhcmFtcy50cnVzdGVkQWNjb3VudHM/Lmxlbmd0aCAmJiAhcGFyYW1zLmNsb3VkRm9ybWF0aW9uRXhlY3V0aW9uUG9saWNpZXM/Lmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcignLS1jbG91ZGZvcm1hdGlvbi1leGVjdXRpb24tcG9saWNpZXMgYXJlIHJlcXVpcmVkIGlmIC0tdHJ1c3QgaGFzIGJlZW4gcGFzc2VkIScpO1xuICB9XG5cbiAgY29uc3QgYm9vdHN0cmFwVGVtcGxhdGVQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJ2Jvb3RzdHJhcC10ZW1wbGF0ZS55YW1sJyk7XG4gIGNvbnN0IGJvb3RzdHJhcFRlbXBsYXRlID0gYXdhaXQgbG9hZFN0cnVjdHVyZWRGaWxlKGJvb3RzdHJhcFRlbXBsYXRlUGF0aCk7XG5cbiAgcmV0dXJuIGRlcGxveUJvb3RzdHJhcFN0YWNrKFxuICAgIGJvb3RzdHJhcFRlbXBsYXRlLFxuICAgIHtcbiAgICAgIEZpbGVBc3NldHNCdWNrZXROYW1lOiBwYXJhbXMuYnVja2V0TmFtZSxcbiAgICAgIEZpbGVBc3NldHNCdWNrZXRLbXNLZXlJZDogcGFyYW1zLmttc0tleUlkLFxuICAgICAgVHJ1c3RlZEFjY291bnRzOiBwYXJhbXMudHJ1c3RlZEFjY291bnRzPy5qb2luKCcsJyksXG4gICAgICBDbG91ZEZvcm1hdGlvbkV4ZWN1dGlvblBvbGljaWVzOiBwYXJhbXMuY2xvdWRGb3JtYXRpb25FeGVjdXRpb25Qb2xpY2llcz8uam9pbignLCcpLFxuICAgICAgUXVhbGlmaWVyOiBwYXJhbXMucXVhbGlmaWVyLFxuICAgICAgUHVibGljQWNjZXNzQmxvY2tDb25maWd1cmF0aW9uOiBwYXJhbXMucHVibGljQWNjZXNzQmxvY2tDb25maWd1cmF0aW9uIHx8IHBhcmFtcy5wdWJsaWNBY2Nlc3NCbG9ja0NvbmZpZ3VyYXRpb24gPT09IHVuZGVmaW5lZCA/ICd0cnVlJyA6ICdmYWxzZScsXG4gICAgfSxcbiAgICBlbnZpcm9ubWVudCxcbiAgICBzZGtQcm92aWRlcixcbiAgICBvcHRpb25zKTtcbn0iXX0=