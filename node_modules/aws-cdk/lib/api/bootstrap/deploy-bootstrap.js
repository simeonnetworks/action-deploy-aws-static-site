"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deployBootstrapStack = void 0;
const os = require("os");
const path = require("path");
const cxschema = require("@aws-cdk/cloud-assembly-schema");
const cxapi = require("@aws-cdk/cx-api");
const fs = require("fs-extra");
const aws_auth_1 = require("../aws-auth");
const deploy_stack_1 = require("../deploy-stack");
const toolkit_info_1 = require("../toolkit-info");
const bootstrap_props_1 = require("./bootstrap-props");
/**
 * Perform the actual deployment of a bootstrap stack, given a template and some parameters
 */
async function deployBootstrapStack(template, parameters, environment, sdkProvider, options) {
    var _a, _b, _c, _d, _e;
    const toolkitStackName = (_a = options.toolkitStackName) !== null && _a !== void 0 ? _a : toolkit_info_1.DEFAULT_TOOLKIT_STACK_NAME;
    const resolvedEnvironment = await sdkProvider.resolveEnvironment(environment);
    const sdk = await sdkProvider.forEnvironment(resolvedEnvironment, aws_auth_1.Mode.ForWriting);
    const newVersion = bootstrapVersionFromTemplate(template);
    const currentBootstrapStack = await toolkit_info_1.ToolkitInfo.lookup(resolvedEnvironment, sdk, toolkitStackName);
    if (currentBootstrapStack && newVersion < currentBootstrapStack.version && !options.force) {
        throw new Error(`Not downgrading existing bootstrap stack from version '${currentBootstrapStack.version}' to version '${newVersion}'. Use --force to force.`);
    }
    const outdir = await fs.mkdtemp(path.join(os.tmpdir(), 'cdk-bootstrap'));
    const builder = new cxapi.CloudAssemblyBuilder(outdir);
    const templateFile = `${toolkitStackName}.template.json`;
    await fs.writeJson(path.join(builder.outdir, templateFile), template, { spaces: 2 });
    builder.addArtifact(toolkitStackName, {
        type: cxschema.ArtifactType.AWS_CLOUDFORMATION_STACK,
        environment: cxapi.EnvironmentUtils.format(environment.account, environment.region),
        properties: {
            templateFile,
            terminationProtection: (_c = (_b = options.parameters) === null || _b === void 0 ? void 0 : _b.terminationProtection) !== null && _c !== void 0 ? _c : false,
        },
    });
    const assembly = builder.buildAssembly();
    return await deploy_stack_1.deployStack({
        stack: assembly.getStackByName(toolkitStackName),
        resolvedEnvironment,
        sdk: await sdkProvider.forEnvironment(resolvedEnvironment, aws_auth_1.Mode.ForWriting),
        sdkProvider,
        force: options.force,
        roleArn: options.roleArn,
        tags: (_d = options.parameters) === null || _d === void 0 ? void 0 : _d.tags,
        execute: (_e = options === null || options === void 0 ? void 0 : options.parameters) === null || _e === void 0 ? void 0 : _e.execute,
        parameters,
    });
}
exports.deployBootstrapStack = deployBootstrapStack;
function bootstrapVersionFromTemplate(template) {
    var _a, _b, _c;
    return parseInt((_c = (_b = (_a = template.Outputs) === null || _a === void 0 ? void 0 : _a[bootstrap_props_1.BOOTSTRAP_VERSION_OUTPUT]) === null || _b === void 0 ? void 0 : _b.Value) !== null && _c !== void 0 ? _c : '0', 10);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95LWJvb3RzdHJhcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRlcGxveS1ib290c3RyYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEseUJBQXlCO0FBQ3pCLDZCQUE2QjtBQUM3QiwyREFBMkQ7QUFDM0QseUNBQXlDO0FBQ3pDLCtCQUErQjtBQUMvQiwwQ0FBZ0Q7QUFDaEQsa0RBQWlFO0FBQ2pFLGtEQUEwRTtBQUMxRSx1REFBMEY7QUFFMUY7O0dBRUc7QUFDSSxLQUFLLFVBQVUsb0JBQW9CLENBQ3hDLFFBQWEsRUFDYixVQUE4QyxFQUM5QyxXQUE4QixFQUM5QixXQUF3QixFQUN4QixPQUFvQzs7SUFFcEMsTUFBTSxnQkFBZ0IsU0FBRyxPQUFPLENBQUMsZ0JBQWdCLG1DQUFJLHlDQUEwQixDQUFDO0lBRWhGLE1BQU0sbUJBQW1CLEdBQUcsTUFBTSxXQUFXLENBQUMsa0JBQWtCLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDOUUsTUFBTSxHQUFHLEdBQUcsTUFBTSxXQUFXLENBQUMsY0FBYyxDQUFDLG1CQUFtQixFQUFFLGVBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUVuRixNQUFNLFVBQVUsR0FBRyw0QkFBNEIsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMxRCxNQUFNLHFCQUFxQixHQUFHLE1BQU0sMEJBQVcsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFDbkcsSUFBSSxxQkFBcUIsSUFBSSxVQUFVLEdBQUcscUJBQXFCLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRTtRQUN6RixNQUFNLElBQUksS0FBSyxDQUFDLDBEQUEwRCxxQkFBcUIsQ0FBQyxPQUFPLGlCQUFpQixVQUFVLDBCQUEwQixDQUFDLENBQUM7S0FDL0o7SUFFRCxNQUFNLE1BQU0sR0FBRyxNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQztJQUN6RSxNQUFNLE9BQU8sR0FBRyxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN2RCxNQUFNLFlBQVksR0FBRyxHQUFHLGdCQUFnQixnQkFBZ0IsQ0FBQztJQUN6RCxNQUFNLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRXJGLE9BQU8sQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLEVBQUU7UUFDcEMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxZQUFZLENBQUMsd0JBQXdCO1FBQ3BELFdBQVcsRUFBRSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQztRQUNuRixVQUFVLEVBQUU7WUFDVixZQUFZO1lBQ1oscUJBQXFCLGNBQUUsT0FBTyxDQUFDLFVBQVUsMENBQUUscUJBQXFCLG1DQUFJLEtBQUs7U0FDMUU7S0FDRixDQUFDLENBQUM7SUFFSCxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUM7SUFFekMsT0FBTyxNQUFNLDBCQUFXLENBQUM7UUFDdkIsS0FBSyxFQUFFLFFBQVEsQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUM7UUFDaEQsbUJBQW1CO1FBQ25CLEdBQUcsRUFBRSxNQUFNLFdBQVcsQ0FBQyxjQUFjLENBQUMsbUJBQW1CLEVBQUUsZUFBSSxDQUFDLFVBQVUsQ0FBQztRQUMzRSxXQUFXO1FBQ1gsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLO1FBQ3BCLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTztRQUN4QixJQUFJLFFBQUUsT0FBTyxDQUFDLFVBQVUsMENBQUUsSUFBSTtRQUM5QixPQUFPLFFBQUUsT0FBTyxhQUFQLE9BQU8sdUJBQVAsT0FBTyxDQUFFLFVBQVUsMENBQUUsT0FBTztRQUNyQyxVQUFVO0tBQ1gsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQTdDRCxvREE2Q0M7QUFFRCxTQUFTLDRCQUE0QixDQUFDLFFBQWE7O0lBQ2pELE9BQU8sUUFBUSxtQkFBQyxRQUFRLENBQUMsT0FBTywwQ0FBRywwQ0FBd0IsMkNBQUcsS0FBSyxtQ0FBSSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDbEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIG9zIGZyb20gJ29zJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyBjeHNjaGVtYSBmcm9tICdAYXdzLWNkay9jbG91ZC1hc3NlbWJseS1zY2hlbWEnO1xuaW1wb3J0ICogYXMgY3hhcGkgZnJvbSAnQGF3cy1jZGsvY3gtYXBpJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCB7IE1vZGUsIFNka1Byb3ZpZGVyIH0gZnJvbSAnLi4vYXdzLWF1dGgnO1xuaW1wb3J0IHsgZGVwbG95U3RhY2ssIERlcGxveVN0YWNrUmVzdWx0IH0gZnJvbSAnLi4vZGVwbG95LXN0YWNrJztcbmltcG9ydCB7IERFRkFVTFRfVE9PTEtJVF9TVEFDS19OQU1FLCBUb29sa2l0SW5mbyB9IGZyb20gJy4uL3Rvb2xraXQtaW5mbyc7XG5pbXBvcnQgeyBCT09UU1RSQVBfVkVSU0lPTl9PVVRQVVQsIEJvb3RzdHJhcEVudmlyb25tZW50T3B0aW9ucyB9IGZyb20gJy4vYm9vdHN0cmFwLXByb3BzJztcblxuLyoqXG4gKiBQZXJmb3JtIHRoZSBhY3R1YWwgZGVwbG95bWVudCBvZiBhIGJvb3RzdHJhcCBzdGFjaywgZ2l2ZW4gYSB0ZW1wbGF0ZSBhbmQgc29tZSBwYXJhbWV0ZXJzXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZXBsb3lCb290c3RyYXBTdGFjayhcbiAgdGVtcGxhdGU6IGFueSxcbiAgcGFyYW1ldGVyczogUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgdW5kZWZpbmVkPixcbiAgZW52aXJvbm1lbnQ6IGN4YXBpLkVudmlyb25tZW50LFxuICBzZGtQcm92aWRlcjogU2RrUHJvdmlkZXIsXG4gIG9wdGlvbnM6IEJvb3RzdHJhcEVudmlyb25tZW50T3B0aW9ucyk6IFByb21pc2U8RGVwbG95U3RhY2tSZXN1bHQ+IHtcblxuICBjb25zdCB0b29sa2l0U3RhY2tOYW1lID0gb3B0aW9ucy50b29sa2l0U3RhY2tOYW1lID8/IERFRkFVTFRfVE9PTEtJVF9TVEFDS19OQU1FO1xuXG4gIGNvbnN0IHJlc29sdmVkRW52aXJvbm1lbnQgPSBhd2FpdCBzZGtQcm92aWRlci5yZXNvbHZlRW52aXJvbm1lbnQoZW52aXJvbm1lbnQpO1xuICBjb25zdCBzZGsgPSBhd2FpdCBzZGtQcm92aWRlci5mb3JFbnZpcm9ubWVudChyZXNvbHZlZEVudmlyb25tZW50LCBNb2RlLkZvcldyaXRpbmcpO1xuXG4gIGNvbnN0IG5ld1ZlcnNpb24gPSBib290c3RyYXBWZXJzaW9uRnJvbVRlbXBsYXRlKHRlbXBsYXRlKTtcbiAgY29uc3QgY3VycmVudEJvb3RzdHJhcFN0YWNrID0gYXdhaXQgVG9vbGtpdEluZm8ubG9va3VwKHJlc29sdmVkRW52aXJvbm1lbnQsIHNkaywgdG9vbGtpdFN0YWNrTmFtZSk7XG4gIGlmIChjdXJyZW50Qm9vdHN0cmFwU3RhY2sgJiYgbmV3VmVyc2lvbiA8IGN1cnJlbnRCb290c3RyYXBTdGFjay52ZXJzaW9uICYmICFvcHRpb25zLmZvcmNlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBOb3QgZG93bmdyYWRpbmcgZXhpc3RpbmcgYm9vdHN0cmFwIHN0YWNrIGZyb20gdmVyc2lvbiAnJHtjdXJyZW50Qm9vdHN0cmFwU3RhY2sudmVyc2lvbn0nIHRvIHZlcnNpb24gJyR7bmV3VmVyc2lvbn0nLiBVc2UgLS1mb3JjZSB0byBmb3JjZS5gKTtcbiAgfVxuXG4gIGNvbnN0IG91dGRpciA9IGF3YWl0IGZzLm1rZHRlbXAocGF0aC5qb2luKG9zLnRtcGRpcigpLCAnY2RrLWJvb3RzdHJhcCcpKTtcbiAgY29uc3QgYnVpbGRlciA9IG5ldyBjeGFwaS5DbG91ZEFzc2VtYmx5QnVpbGRlcihvdXRkaXIpO1xuICBjb25zdCB0ZW1wbGF0ZUZpbGUgPSBgJHt0b29sa2l0U3RhY2tOYW1lfS50ZW1wbGF0ZS5qc29uYDtcbiAgYXdhaXQgZnMud3JpdGVKc29uKHBhdGguam9pbihidWlsZGVyLm91dGRpciwgdGVtcGxhdGVGaWxlKSwgdGVtcGxhdGUsIHsgc3BhY2VzOiAyIH0pO1xuXG4gIGJ1aWxkZXIuYWRkQXJ0aWZhY3QodG9vbGtpdFN0YWNrTmFtZSwge1xuICAgIHR5cGU6IGN4c2NoZW1hLkFydGlmYWN0VHlwZS5BV1NfQ0xPVURGT1JNQVRJT05fU1RBQ0ssXG4gICAgZW52aXJvbm1lbnQ6IGN4YXBpLkVudmlyb25tZW50VXRpbHMuZm9ybWF0KGVudmlyb25tZW50LmFjY291bnQsIGVudmlyb25tZW50LnJlZ2lvbiksXG4gICAgcHJvcGVydGllczoge1xuICAgICAgdGVtcGxhdGVGaWxlLFxuICAgICAgdGVybWluYXRpb25Qcm90ZWN0aW9uOiBvcHRpb25zLnBhcmFtZXRlcnM/LnRlcm1pbmF0aW9uUHJvdGVjdGlvbiA/PyBmYWxzZSxcbiAgICB9LFxuICB9KTtcblxuICBjb25zdCBhc3NlbWJseSA9IGJ1aWxkZXIuYnVpbGRBc3NlbWJseSgpO1xuXG4gIHJldHVybiBhd2FpdCBkZXBsb3lTdGFjayh7XG4gICAgc3RhY2s6IGFzc2VtYmx5LmdldFN0YWNrQnlOYW1lKHRvb2xraXRTdGFja05hbWUpLFxuICAgIHJlc29sdmVkRW52aXJvbm1lbnQsXG4gICAgc2RrOiBhd2FpdCBzZGtQcm92aWRlci5mb3JFbnZpcm9ubWVudChyZXNvbHZlZEVudmlyb25tZW50LCBNb2RlLkZvcldyaXRpbmcpLFxuICAgIHNka1Byb3ZpZGVyLFxuICAgIGZvcmNlOiBvcHRpb25zLmZvcmNlLFxuICAgIHJvbGVBcm46IG9wdGlvbnMucm9sZUFybixcbiAgICB0YWdzOiBvcHRpb25zLnBhcmFtZXRlcnM/LnRhZ3MsXG4gICAgZXhlY3V0ZTogb3B0aW9ucz8ucGFyYW1ldGVycz8uZXhlY3V0ZSxcbiAgICBwYXJhbWV0ZXJzLFxuICB9KTtcbn1cblxuZnVuY3Rpb24gYm9vdHN0cmFwVmVyc2lvbkZyb21UZW1wbGF0ZSh0ZW1wbGF0ZTogYW55KTogbnVtYmVyIHtcbiAgcmV0dXJuIHBhcnNlSW50KHRlbXBsYXRlLk91dHB1dHM/LltCT09UU1RSQVBfVkVSU0lPTl9PVVRQVVRdPy5WYWx1ZSA/PyAnMCcsIDEwKTtcbn0iXX0=